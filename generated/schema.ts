// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class File extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save File entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type File must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("File", id.toString(), this);
    }
  }

  static load(id: string): File | null {
    return changetype<File | null>(store.get("File", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get fileShares(): Array<string> {
    let value = this.get("fileShares");
    return value!.toStringArray();
  }

  set fileShares(value: Array<string>) {
    this.set("fileShares", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get publicKey(): Bytes {
    let value = this.get("publicKey");
    return value!.toBytes();
  }

  set publicKey(value: Bytes) {
    this.set("publicKey", Value.fromBytes(value));
  }

  get filesOwned(): Array<string> {
    let value = this.get("filesOwned");
    return value!.toStringArray();
  }

  set filesOwned(value: Array<string>) {
    this.set("filesOwned", Value.fromStringArray(value));
  }

  get fileShares(): Array<string> {
    let value = this.get("fileShares");
    return value!.toStringArray();
  }

  set fileShares(value: Array<string>) {
    this.set("fileShares", Value.fromStringArray(value));
  }
}

export class FileShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FileShare entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FileShare must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FileShare", id.toString(), this);
    }
  }

  static load(id: string): FileShare | null {
    return changetype<FileShare | null>(store.get("FileShare", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get file(): string {
    let value = this.get("file");
    return value!.toString();
  }

  set file(value: string) {
    this.set("file", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get fileKey(): string {
    let value = this.get("fileKey");
    return value!.toString();
  }

  set fileKey(value: string) {
    this.set("fileKey", Value.fromString(value));
  }
}
